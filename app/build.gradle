apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    signingConfigs {
        myConfig rootProject.ext.signingConfigs.release
    }
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }

        ndk {
            // 设置支持的 SO 库构架，注意这里要根据你的实际情况来设置
            abiFilters 'armeabi', 'arm64-v8a', 'x86'
        }
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false

    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled true
            signingConfig signingConfigs.myConfig
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.myConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {//就算您使用 AndroidStuido v3.0, 也需要配置以下参数
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation rootProject.ext.dependencies['constraintlayout']
    implementation rootProject.ext.dependencies['liveData']
    implementation rootProject.ext.dependencies['lifeScrope']
    implementation rootProject.ext.dependencies['glide']
    implementation rootProject.ext.dependencies['imageCompress']
    implementation rootProject.ext.dependencies['easyPermission']
    implementation rootProject.ext.dependencies['shape']
    implementation rootProject.ext.dependencies['walle']
    implementation rootProject.ext.dependencies['wnl-utils']
    implementation rootProject.ext.dependencies['preference']
    implementation rootProject.ext.dependencies['multitype']
    implementation rootProject.ext.dependencies['wnl-share']
    implementation rootProject.ext.dependencies['wnl-share-umeng']
    implementation rootProject.ext.dependencies['andPermission']
    implementation rootProject.ext.dependencies['rxjava']
    implementation rootProject.ext.dependencies['rxandroid']
    implementation rootProject.ext.dependencies['glidebum']
    implementation rootProject.ext.dependencies['bigImage']
    implementation rootProject.ext.dependencies['tablayout']
//    implementation rootProject.ext.dependencies['extensions']
    annotationProcessor rootProject.ext.dependencies['glideOkhttp']
    implementation rootProject.ext.dependencies['gson']
    implementation "com.wnl.common:webview:$libVersion"
    implementation rootProject.ext.dependencies['fastjson']
    annotationProcessor rootProject.ext.dependencies['refreshKernel']
    annotationProcessor rootProject.ext.dependencies['refreshHeaderClassic']
    annotationProcessor rootProject.ext.dependencies['refreshFooterClassic']
    api(name: 'open_ad_sdk_3.0.0.1', ext: 'aar')
    implementation rootProject.ext.dependencies['refreshKernel']
    implementation rootProject.ext.dependencies['refreshHeaderClassic']
    implementation rootProject.ext.dependencies['refreshFooterClassic']
    implementation rootProject.ext.dependencies['baseAdapter']
    implementation rootProject.ext.dependencies['videoPlayer']
    implementation rootProject.ext.dependencies['qiniu']

    api(name: 'msa_mdid_1.0.13', ext: 'aar')
    implementation project(path: ':core')
    implementation project(path: ':net')
    implementation project(path: ':coolKtx')

    implementation "com.wnl.common:push-umeng:$libVersion"

    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.15'

}

def getDate() {
    TimeZone.setDefault(TimeZone.getTimeZone("GMT+8"))
    Calendar cal = Calendar.getInstance();
    def date = cal.getTime();
    def formattedDate = date.format('yyyyMMdd-HHmm')
    return formattedDate
}

/**
 * 改变包路径
 * @param type
 */
def changeApkPath(String type) {
    def dateString = getDate()
    android.applicationVariants.all { variant ->
        variant.getPackageApplication().outputDirectory = new File(rootProject.rootDir.getAbsolutePath() + "/output/最美社区/" + rootProject.ext.android.versionName + "/" + type + "/" + dateString)
        variant.getPackageApplication().outputScope.apkDatas.forEach { apkData ->
            if (variant.buildType.name == "release") {
                //这个修改输出APK的文件名
                apkData.outputFileName = type + "-" + rootProject.ext.android.versionName + "-" + rootProject.ext.android.versionCode + '.apk'
            }
        }
    }
}

//打测试包
task assembleForPreview(dependsOn: 'assembleRelease') {
    dependsOn {
        changeApkPath("beta")
    }
}

/**
 * 发布华为模板包
 */
task assembleForRelease(dependsOn: ['assembleRelease']) {
    dependsOn {
        changeApkPath("release")
    }
}